/**
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChargeDto from '../model/ChargeDto';
import ChargeReq from '../model/ChargeReq';
import ChargesResponse from '../model/ChargesResponse';
import ElepayRestError from '../model/ElepayRestError';

/**
* Charge service.
* @module api/ChargeApi
* @version 1.0
*/
export default class ChargeApi {

    /**
    * Constructs a new ChargeApi. 
    * @alias module:api/ChargeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCharge operation.
     * @callback module:api/ChargeApi~createChargeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create charge
     * 決済処理を行います。
     * @param {module:model/ChargeReq} charge 支払リクエスト
     * @param {module:api/ChargeApi~createChargeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargeDto}
     */
    createCharge(charge, callback) {
      let postBody = charge;
      // verify the required parameter 'charge' is set
      if (charge === undefined || charge === null) {
        throw new Error("Missing the required parameter 'charge' when calling createCharge");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ChargeDto;
      return this.apiClient.callApi(
        '/charges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCharges operation.
     * @callback module:api/ChargeApi~listChargesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List charges
     * 決済に関する情報を一覧で取得します。
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.paymentMethod 決済方法(複数の指定が可能です)
     * @param {Number} opts.from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。
     * @param {Number} opts.to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します
     * @param {module:model/String} opts.dateField 検索対象範囲の項目を指定します。
     * @param {String} opts.status 支払状況
     * @param {Number} opts.limit 最大件数 (default to 20)
     * @param {Number} opts.offset 検索開始位置 (default to 0)
     * @param {module:model/String} opts.sort ソート項目
     * @param {String} opts.order ソート順 (default to 'desc')
     * @param {module:api/ChargeApi~listChargesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargesResponse}
     */
    listCharges(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'paymentMethod': this.apiClient.buildCollectionParam(opts['paymentMethod'], 'multi'),
        'from': opts['from'],
        'to': opts['to'],
        'dateField': opts['dateField'],
        'status': opts['status'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ChargesResponse;
      return this.apiClient.callApi(
        '/charges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveCharge operation.
     * @callback module:api/ChargeApi~retrieveChargeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve charge
     * 決済に関する詳細情報を取得します。
     * @param {String} id Charge ID
     * @param {module:api/ChargeApi~retrieveChargeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargeDto}
     */
    retrieveCharge(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveCharge");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ChargeDto;
      return this.apiClient.callApi(
        '/charges/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeCharge operation.
     * @callback module:api/ChargeApi~revokeChargeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChargeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * revoke charge
     * 支払いを取り消します。
     * @param {String} id Charge ID
     * @param {module:api/ChargeApi~revokeChargeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChargeDto}
     */
    revokeCharge(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling revokeCharge");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = ChargeDto;
      return this.apiClient.callApi(
        '/charges/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
