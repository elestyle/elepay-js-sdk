/**
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ElepayRestError from '../model/ElepayRestError';
import RefundDto from '../model/RefundDto';
import RefundReq from '../model/RefundReq';
import RefundsResponse from '../model/RefundsResponse';

/**
* Refund service.
* @module api/RefundApi
* @version 1.0
*/
export default class RefundApi {

    /**
    * Constructs a new RefundApi. 
    * @alias module:api/RefundApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRefund operation.
     * @callback module:api/RefundApi~createRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create refund
     * 決済の全額あるいは一部の返金処理を行います。
     * @param {String} id Charge ID
     * @param {module:model/RefundReq} refund 返金の詳細情報
     * @param {module:api/RefundApi~createRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundDto}
     */
    createRefund(id, refund, callback) {
      let postBody = refund;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createRefund");
      }
      // verify the required parameter 'refund' is set
      if (refund === undefined || refund === null) {
        throw new Error("Missing the required parameter 'refund' when calling createRefund");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = RefundDto;
      return this.apiClient.callApi(
        '/charges/{id}/refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChargesRefunds operation.
     * @callback module:api/RefundApi~listChargesRefundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List refunds
     * 返金に関する情報を一覧で取得します。
     * @param {String} id Charge ID
     * @param {module:api/RefundApi~listChargesRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundsResponse}
     */
    listChargesRefunds(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listChargesRefunds");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = RefundsResponse;
      return this.apiClient.callApi(
        '/charges/{id}/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRefunds operation.
     * @callback module:api/RefundApi~listRefundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List refunds
     * 返金に関する情報を一覧で取得します。
     * @param {String} chargeId Charge ID
     * @param {module:api/RefundApi~listRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundsResponse}
     */
    listRefunds(chargeId, callback) {
      let postBody = null;
      // verify the required parameter 'chargeId' is set
      if (chargeId === undefined || chargeId === null) {
        throw new Error("Missing the required parameter 'chargeId' when calling listRefunds");
      }

      let pathParams = {
      };
      let queryParams = {
        'chargeId': chargeId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = RefundsResponse;
      return this.apiClient.callApi(
        '/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveChargeRefund operation.
     * @callback module:api/RefundApi~retrieveChargeRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve refund
     * 返金に関する詳細情報を取得します。
     * @param {String} id Charge ID
     * @param {String} refundId Refund ID
     * @param {module:api/RefundApi~retrieveChargeRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundDto}
     */
    retrieveChargeRefund(id, refundId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveChargeRefund");
      }
      // verify the required parameter 'refundId' is set
      if (refundId === undefined || refundId === null) {
        throw new Error("Missing the required parameter 'refundId' when calling retrieveChargeRefund");
      }

      let pathParams = {
        'id': id,
        'refundId': refundId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = RefundDto;
      return this.apiClient.callApi(
        '/charges/{id}/refunds/{refundId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveRefund operation.
     * @callback module:api/RefundApi~retrieveRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve refund
     * 返金に関する詳細情報を取得します。
     * @param {String} refundId Refund ID
     * @param {module:api/RefundApi~retrieveRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundDto}
     */
    retrieveRefund(refundId, callback) {
      let postBody = null;
      // verify the required parameter 'refundId' is set
      if (refundId === undefined || refundId === null) {
        throw new Error("Missing the required parameter 'refundId' when calling retrieveRefund");
      }

      let pathParams = {
        'refundId': refundId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json;charset=utf-8'];
      let returnType = RefundDto;
      return this.apiClient.callApi(
        '/refunds/{refundId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
